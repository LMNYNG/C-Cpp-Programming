MOV RR 2 139 226(+4* 레지스터)
MOV RS 4 139 6(+8*레지스터)  (4* 심볼 주소 네자리 출력)
MOV SR 4 6(+8*레지스터) (심볼주소 네자리 출력)
MOV RI 3 180(+레지스터) (직접값 네자리 출력)
MOV SI 5 119 6 (심볼 주소) (네자리 직접값 네자리)
MOV R[R] 2 139 7(+8*레지스터)
MOV [R]R 2 137 4(+8*레지스터) 
ADD RR 2 3 216(+레지스터)
ADD RI 3 83 192(+레지스터) (직접값 두자리)
SUB RR 2 43 216(+레지스터)
SUB RI 3 83 235(-레지스터) (직접값 두자리)
AND RR 2 35 193(+레지스터)
AND RI 3 131 224(+레지스터) (직접값 두자리)
AND RS 4 35 6(+8*레지스터) (심볼주소 네자리)
AND SR 4 33 6+(+8*레지스터) (심볼주소 네자리)
OR RR 2 11 200(+레지스터)
OR RI 3 131 200(+레지스터) (직접값 두자리)
OR RS 4 11 6(+8*레지스터) (심볼주소 네자리)
OR SR 4  9 6(+8*레지스터) (심볼주소 네자리)
INC R 1 64(+레지스터)
DEC R 1 72(+레지스터)
CMP RR 2 59 216(+레지스터)
CMP RI 3 131 248(+레지스터) (직접값 두자리)
CMP SR 4 57 6(+8*레지스터) (심볼주소 네자리)
CMP RS 4 59 6(+8*레지스터) (심볼주소 네자리)
JMP S 2 235 251(-2*심볼주소)
JA S 2 119 251(-2*심볼주소)
JB S 2 114 251(-2*심볼주소)
JE S 2 116 251(-2*심볼주소)
INT I 2 205 33
명령어 // 레지스터 종류 // 길이 // 기계어 변환

어셈블러 구상
0. 심볼테이블이 완성된 상태, 레지스터 테이블도 구조체로 생성
1. 명령어 테이블의 내용을 순서대로 저장한다 (앞 세자리만) 30개의 구조체 배열
MOV면 0~6 순회 
ADD면 7~8순회 
SUB면 9~10순회 
AND면 11~14순회 
OR이면 15~18순회 
INC면 19 순회 
DEC이면 20순회
CMP면 21~24순회 
JMP면 25 순회 
JA면 26순회
JB면 27순회 
JE면 28순회
INT면 29순회
2. 텍스트 파일로부터 명령어를 읽어온다.
3. 연산항들을 읽는다 (RR, RS, SR, RI 등등 으로)
4. 인덱스를 네자리로 출력한다.
5. 연산항과 일치하는 구조체의 인덱스만큼 인덱스를 더한다. 
6. 레지스터 테이블에서 레지스터 번호를 읽어와서 필요하면 기계어에 더한다
7. 기계어를 출력한다.







